name: CI/CD Workflow

on:
  push:
    branches:
      - master
  pull_request:

jobs:
  config:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Run tests in a container
        run: docker run --rm -it felipelima94/order-system-db:latest

  test:
    runs-on: ubuntu-latest
    needs: [config]
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "18"

      - name: Install dependencies
        run: |
          npm install

      - name: Set up Docker
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Run tests e2e
        run: |
          yarn test:e2e

      - name: Run tests unit
        run: |
          yarn test:unit

      - name: Run tests integration
        run: |
          yarn test:integration

    # sonar:
    #   runs-on: ubuntu-latest
    #   needs: test
    #   steps:
    #     - name: Check out code
    #       uses: actions/checkout@v2

    #     - name: Run SonarQube Scan
    #       uses: sonarsource/sonar-scanner-action@v2.0.0
    #       with:
    #         sonar-project-key: seu_projeto
    #         sonar-host-url: http://seu-sonarqube:9000
    #         sonar-login: ${{ secrets.SONAR_TOKEN }} # Adicione o token nas secrets do seu reposit√≥rio
    #         sonar-scanner-options: |
    #           -Dsonar.sources=.
    #           -Dsonar.language=js
    #           -Dsonar.tests=.
    #           -Dsonar.test.inclusions=**/*.spec.ts  # Altere conforme sua estrutura de testes

  deploy:
    runs-on: ubuntu-latest
    needs: [config, test]
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push the image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.REPO_NAME }}
          IMAGE_TAG: "latest"
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Deploy Aws EKS
        if: steps.build-image.outcome != 'failure'
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          CLUSTER_NAME: ${{ secrets.CLUSTER_NAME }}
        run: |
          aws eks update-kubeconfig --region $AWS_REGION --name $CLUSTER_NAME
          kubectl apply -f api-svc
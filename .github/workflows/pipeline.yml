name: CI/CD Workflow

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  sonarcloud:
    name: SonarQube Cloud
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20"

      - name: Running dependencies
        run: |
          yarn add aws-sdk
          yarn add @aws-sdk/client-dynamodb
          npm install @aws-sdk/util-dynamodb
          npm install @aws-sdk/lib-dynamodb @aws-sdk/client-dynamodb

      - name: Set up Docker
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Test and coverage
        run: yarn test:cov

      - name: SonarQube Cloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  deploy:
    runs-on: ubuntu-latest
    #needs: [sonarcloud]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
    
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Running dependencies
        run: |
          yarn add aws-sdk
          yarn add @aws-sdk/client-dynamodb
          npm install @nestjs/core
          npm install aws-sdk
          npm install --save-dev @types/swagger-jsdoc @types/swagger-ui-express
          npm install @aws-sdk/lib-dynamodb @aws-sdk/client-dynamodb
  
      - name: Build, tag, and push the image to Amazon ECR
        id: build-image
        run: |
          # Listar conteúdo do diretório para verificar a presença do Dockerfile
          pwd
          ls
          
          # Construir a imagem Docker
          docker build -t 672970943008.dkr.ecr.us-east-1.amazonaws.com/order-system/customers:latest -f dockerfile .
          # Push da imagem para o ECR
          docker push 672970943008.dkr.ecr.us-east-1.amazonaws.com/order-system/customers:latest
      - name: Deploy Aws EKS
        if: steps.build-image.outcome != 'failure'
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          CLUSTER_NAME: ${{ secrets.CLUSTER_NAME }}
        run: |
          aws eks update-kubeconfig --region us-east-1 --name cluster-customers
          kubectl apply -f api-svc
